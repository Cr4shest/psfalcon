function Confirm-FalconCommand {
<#
.Synopsis
Get status of an executed read-only command on a single host
.Description
Confirms the status of an executed 'read-only' command. The single-host Real-time Response APIs (used when creating
sessions with single hosts) require that commands be confirmed to 'acknowledge' that they have been processed as
part of your API-based workflow. Failing to confirm commands can lead to unexpected results, like the
loss of the 'current directory' when navigating folders in the file system of a remote host.
.Parameter CloudRequestId
Real-time Response command request identifier
.Parameter SequenceId
Sequence identifier
.Role
real-time-response:read
.Example
PS>Confirm-FalconCommand -CloudRequestId $Command.cloud_request_id

Retrieves the status of the command issued and stored in the '$Command' variable under the property
'cloud_request_id', previously generated by 'Invoke-FalconCommand'.
#>
    [CmdletBinding(DefaultParameterSetName = '/real-time-response/entities/command/v1:get')]
    param(
        [Parameter(ParameterSetName = '/real-time-response/entities/command/v1:get', Mandatory = $true,
            Position = 1)]
        [ValidatePattern('^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$')]
        [string] $CloudRequestId,

        [Parameter(ParameterSetName = '/real-time-response/entities/command/v1:get', Position = 2)]
        [int] $SequenceId
    )
    begin {
        if (!$PSBoundParameters.SequenceId) {
            $PSBoundParameters.Add('sequence_id', 0)
        }
        $Fields = @{
            CloudRequestId = 'cloud_request_id'
            SequenceId     = 'sequence_id'
        }
        $Param = @{
            Command  = $MyInvocation.MyCommand.Name
            Endpoint = $PSCmdlet.ParameterSetName
            Inputs   = Update-FieldName -Fields $Fields -Inputs $PSBoundParameters
            Format   = @{
                Query = @('cloud_request_id', 'sequence_id')
            }
        }
    }
    process {
        Invoke-Falcon @Param
    }
}
function Confirm-FalconGetFile {
<#
.Synopsis
Check the status of a Real-time Response 'get' command request
.Parameter SessionId
Real-time Response session identifier
.Parameter BatchGetCmdReqId
Batch Real-time Response 'get' command identifier
.Parameter Timeout
Length of time to wait for a result, in seconds
.Role
real-time-response:write
.Example
PS>Confirm-FalconGetFile -BatchGetCmdReqId $Get.batch_get_cmd_reqid

Return the status of a 'get' command issued to a batch Real-time Response session.
.Example
PS>Confirm-FalconGetFile -SessionId $Get.session_id

Return the status of a 'get' command issued to a single host Real-time Response session.
#>
    [CmdletBinding(DefaultParameterSetName = '/real-time-response/entities/file/v1:get')]
    param(
        [Parameter(ParameterSetName = '/real-time-response/entities/file/v1:get', Mandatory = $true, Position = 1)]
        [ValidatePattern('^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$')]
        [string] $SessionId,

        [Parameter(ParameterSetName = '/real-time-response/combined/batch-get-command/v1:get', Mandatory = $true,
            Position = 1)]
        [ValidatePattern('^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$')]
        [string] $BatchGetCmdReqId,

        [Parameter(ParameterSetName = '/real-time-response/combined/batch-get-command/v1:get', Position = 2)]
        [ValidateRange(30,600)]
        [int] $Timeout
    )
    begin {
        $Fields = @{
            BatchGetCmdReqId = 'batch_get_cmd_req_id'
            SessionId        = 'session_id'
        }
        $Param = @{
            Command  = $MyInvocation.MyCommand.Name
            Endpoint = $PSCmdlet.ParameterSetName
            Inputs   = Update-FieldName -Fields $Fields -Inputs $PSBoundParameters
            Format   = @{
                Query = @('session_id', 'batch_get_cmd_req_id', 'timeout', 'timeout_duration')
            }
        }
    }
    process {
        $Request = Invoke-Falcon @Param
        if ($PSCmdlet.ParameterSetName -eq '/real-time-response/combined/batch-get-command/v1:get') {
            $Request.PSObject.Properties | ForEach-Object {
                $Aid = $_.Name
                ($_.Value).PSObject.Properties.Add((New-Object PSNoteProperty('aid', $Aid)))
                $_.Value
            }
        } else {
            $Request
        }
    }
}
function Confirm-FalconResponderCommand {
<#
.Synopsis
Get status of an executed active-responder command on a single host
.Description
Confirms the status of an executed 'active-responder' command. The single-host Real-time Response APIs (used when
creating sessions with single hosts) require that commands be confirmed to 'acknowledge' that they have been
processed as part of your API-based workflow. Failing to confirm commands can lead to unexpected results, like the
loss of the 'current directory' when navigating folders in the file system of a remote host.
.Parameter CloudRequestId
Real-time Response command request identifier
.Parameter SequenceId
Sequence identifier
.Role
real-time-response:write
.Example
PS>Confirm-FalconResponderCommand -CloudRequestId $Command.cloud_request_id

Retrieves the status of the command issued and stored in the '$Command' variable under the property
'cloud_request_id', previously generated by 'Invoke-FalconResponderCommand'.
#>
    [CmdletBinding(DefaultParameterSetName = '/real-time-response/entities/active-responder-command/v1:get')]
    param(
        [Parameter(ParameterSetName = '/real-time-response/entities/active-responder-command/v1:get',
            Mandatory = $true, Position = 1)]
        [ValidatePattern('^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$')]
        [string] $CloudRequestId,

        [Parameter(ParameterSetName = '/real-time-response/entities/active-responder-command/v1:get',
            Position = 2)]
        [int] $SequenceId
    )
    begin {
        if (!$PSBoundParameters.SequenceId) {
            $PSBoundParameters.Add('sequence_id', 0)
        }
        $Fields = @{
            CloudRequestId = 'cloud_request_id'
            SequenceId     = 'sequence_id'
        }
        $Param = @{
            Command  = $MyInvocation.MyCommand.Name
            Endpoint = $PSCmdlet.ParameterSetName
            Inputs   = Update-FieldName -Fields $Fields -Inputs $PSBoundParameters
            Format   = @{
                Query = @('cloud_request_id', 'sequence_id')
            }
        }
    }
    process {
        Invoke-Falcon @Param
    }
}
function Get-FalconSession {
<#
.Synopsis
Search for Real-time Response sessions
.Description
Real-time Response sessions are segmented by permission, meaning that only sessions that were created using your
OAuth2 API Client will be visible.

'Get-FalconQueue' can be used to find and export information about all sessions in the 'offline queue'.
.Parameter Ids
Real-time Response session identifier(s)
.Parameter Filter
Falcon Query Language expression to limit results
.Parameter Sort
Property and direction to sort results
.Parameter Offset
Position to begin retrieving results
.Parameter Limit
Maximum number of results per request
.Parameter Queue
Restrict search to sessions that have been queued
.Parameter Detailed
Retrieve detailed information
.Parameter All
Repeat requests until all available results are retrieved
.Parameter Total
Display total result count instead of results
.Role
real-time-response:read
.Example
PS>Get-FalconSession -Detailed

Retrieve the first set of detailed results for Real-time Response sessions created using your OAuth2 API Client.
.Example
PS>Get-FalconSession -Ids <id>, <id> -Queue

Retrieve the detailed information about Real-time Response sessions <id> and <id>, created using your OAuth2
API Client and added to the 'offline queue'. 'Get-FalconQueue' can be used to output detail about all sessions
that are accessible within the 'offline queue'.
#>
    [CmdletBinding(DefaultParameterSetName = '/real-time-response/queries/sessions/v1:get')]
    param(
        [Parameter(ParameterSetName = '/real-time-response/entities/queued-sessions/GET/v1:post',
            Mandatory = $true, Position = 1)]
        [Parameter(ParameterSetName = '/real-time-response/entities/sessions/GET/v1:post', Mandatory = $true,
            Position = 1)]
        [ValidatePattern('^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$')]
        [array] $Ids,

        [Parameter(ParameterSetName = '/real-time-response/queries/sessions/v1:get', Position = 1)]
        [string] $Filter,

        [Parameter(ParameterSetName = '/real-time-response/queries/sessions/v1:get', Position = 2)]
        [string] $Sort,

        [Parameter(ParameterSetName = '/real-time-response/queries/sessions/v1:get', Position = 4)]
        [ValidateRange(1,100)]
        [int] $Limit,

        [Parameter(ParameterSetName = '/real-time-response/queries/sessions/v1:get', Position = 3)]
        [int] $Offset,

        [Parameter(ParameterSetName = '/real-time-response/entities/queued-sessions/GET/v1:post',
            Mandatory = $true)]
        [switch] $Queue,

        [Parameter(ParameterSetName = '/real-time-response/queries/sessions/v1:get')]
        [switch] $Detailed,

        [Parameter(ParameterSetName = '/real-time-response/queries/sessions/v1:get')]
        [switch] $All,

        [Parameter(ParameterSetName = '/real-time-response/queries/sessions/v1:get')]
        [switch] $Total

    )
    begin {
        $Param = @{
            Command  = $MyInvocation.MyCommand.Name
            Endpoint = $PSCmdlet.ParameterSetName
            Inputs   = $PSBoundParameters
            Format   = @{
                Query = @('sort', 'offset', 'limit', 'filter')
                Body  = @{
                    root = @('ids')
                }
            }
        }
    }
    process {
        Invoke-Falcon @Param
    }
}
function Invoke-FalconBatchGet {
<#
.Synopsis
Issue a Real-time Response batch 'get' command to an existing batch session
.Description
Once the 'get' command has been issued, a 'batch_get_cmd_req_id' property will be created. That value is used
to verify the completion of the file transfer using 'Confirm-FalconBatchGet'.
.Parameter BatchId
Batch Real-time Response session identifier
.Parameter FilePath
Path to file on target Host(s)
.Parameter OptionalHostIds
Restrict execution to specific Host identifier(s)
.Parameter Timeout
Length of time to wait for a result, in seconds
.Role
real-time-response:write
.Example
PS>$Get = Invoke-FalconBatchGet -BatchId $Session.batch_id -FilePath C:\temp\file.exe

Issue the Real-time Response 'get' command to devices contained in a batch Real-time Response session
(previously created and saved in the variable '$Session') to retrieve 'C:\temp\file.exe'. The contents of
'$Get' can then be used with 'Confirm-FalconGetFile' to verify that the transfer has completed.
#>
    [CmdletBinding(DefaultParameterSetName = '/real-time-response/combined/batch-get-command/v1:post')]
    param(
        [Parameter(ParameterSetName = '/real-time-response/combined/batch-get-command/v1:post', Mandatory = $true,
            Position = 1)]
        [ValidatePattern('^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$')]
        [string] $BatchId,

        [Parameter(ParameterSetName = '/real-time-response/combined/batch-get-command/v1:post', Mandatory = $true,
            Position = 2)]
        [string] $FilePath,

        [Parameter(ParameterSetName = '/real-time-response/combined/batch-get-command/v1:post', Position = 3)]
        [ValidatePattern('^\w{32}$')]
        [array] $OptionalHostIds,

        [Parameter(ParameterSetName = '/real-time-response/combined/batch-get-command/v1:post', Position = 4)]
        [ValidateRange(30,600)]
        [int] $Timeout
    )
    begin {
        $Fields = @{
            BatchId         = 'batch_id'
            FilePath        = 'file_path'
            OptionalHostIds = 'optional_hosts'
        }
        $Param = @{
            Command  = $MyInvocation.MyCommand.Name
            Endpoint = $PSCmdlet.ParameterSetName
            Inputs   = Update-FieldName -Fields $Fields -Inputs $PSBoundParameters
            Format   = @{
                Query = @('timeout')
                Body  = @{
                    root = @('batch_id', 'file_path', 'optional_hosts')
                }
            }
        }
    }
    process {
        $Request = Invoke-Falcon @Param
        if ($Request.batch_id -and $Request.resources) {
            [PSCustomObject] @{
                batch_get_cmd_req_id = $Request.batch_get_cmd_req_id
                hosts                = $Request.combined.resources.PSObject.Properties.Value
            }
        } else {
            $Request
        }
    }
}
function Invoke-FalconCommand {
<#
.Synopsis
Issue a Real-time Response read-only command to an existing single-host or batch session
.Description
Sessions can be started using 'Start-FalconSession'. A successfully issued session will contain a 'session_id' or
'batch_id' value which can be used with the '-SessionId' or '-BatchId' parameters.
.Parameter SessionId
Real-time Response session identifier
.Parameter BatchId
Batch Real-time Response session identifier
.Parameter Command
Real-time Response command
.Parameter Arguments
Arguments to include with the command
.Parameter OptionalHostIds
Restrict execution to specific Host identifier(s)
.Parameter Timeout
Length of time to wait for a result, in seconds
.Role
real-time-response:read
.Example
PS>Invoke-FalconCommand -Command ls -Arguments C:\Windows -SessionId $Session.session_id

Issues the command 'ls' for the directory 'C:\Windows' to the session started and saved as the variable '$Session'.
Sessions can be started using 'Start-FalconSession'.
#>
    [CmdletBinding(DefaultParameterSetName = '/real-time-response/entities/command/v1:post')]
    param(
        [Parameter(ParameterSetName = '/real-time-response/entities/command/v1:post', Mandatory = $true,
            Position = 1)]
        [ValidatePattern('^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$')]
        [string] $SessionId,

        [Parameter(ParameterSetName = '/real-time-response/combined/batch-command/v1:post', Mandatory = $true,
            Position = 1)]
        [ValidatePattern('^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$')]
        [string] $BatchId,

        [Parameter(ParameterSetName = '/real-time-response/entities/command/v1:post', Mandatory = $true,
            Position = 2)]
        [Parameter(ParameterSetName = '/real-time-response/combined/batch-command/v1:post', Mandatory = $true,
            Position = 2)]
        [ValidateSet('cat', 'cd', 'clear', 'csrutil', 'env', 'eventlog', 'filehash', 'getsid', 'help', 'history',
            'ifconfig', 'ipconfig', 'ls', 'mount', 'netstat', 'ps', 'reg query', 'users')]
        [string] $Command,

        [Parameter(ParameterSetName = '/real-time-response/entities/command/v1:post', Position = 3)]
        [Parameter(ParameterSetName = '/real-time-response/combined/batch-command/v1:post', Position = 3)]
        [string] $Arguments,

        [Parameter(ParameterSetName = '/real-time-response/combined/batch-command/v1:post', Position = 4)]
        [ValidatePattern('^\w{32}$')]
        [array] $OptionalHostIds,

        [Parameter(ParameterSetName = '/real-time-response/combined/batch-command/v1:post', Position = 5)]
        [ValidateRange(30,600)]
        [int] $Timeout
    )
    begin {
        $CommandString = if ($PSBoundParameters.Arguments) {
            @($PSBoundParameters.Command, $PSBoundParameters.Arguments) -join ' '
            [void] $PSBoundParameters.Remove('Arguments')
        } else {
            $PSBoundParameters.Command
        }
        $PSBoundParameters.Add('command_string', $CommandString)
        $Fields = @{
            BatchId         = 'batch_id'
            Command         = 'base_command'
            OptionalHostIds = 'optional_hosts'
            SessionId       = 'session_id'
        }
        $Param = @{
            Command  = $MyInvocation.MyCommand.Name
            Endpoint = $PSCmdlet.ParameterSetName
            Inputs   = Update-FieldName -Fields $Fields -Inputs $PSBoundParameters
            Format   = @{
                Query = @('timeout')
                Body  = @{
                    root = @('session_id', 'base_command', 'command_string', 'optional_hosts', 'batch_id')
                }
            }
        }
    }
    process {
        Invoke-Falcon @Param
    }
}
function Invoke-FalconResponderCommand {
<#
.Synopsis
Issue a Real-time Response active-responder command to an existing single-host or batch session
.Description
Sessions can be started using 'Start-FalconSession'. A successfully issued session will contain a 'session_id' or
'batch_id' value which can be used with the '-SessionId' or '-BatchId' parameters.
.Parameter SessionId
Real-time Response session identifier
.Parameter BatchId
Batch Real-time Response session identifier
.Parameter Command
Real-time Response command
.Parameter Arguments
Arguments to include with the command
.Parameter OptionalHostIds
Restrict execution to specific Host identifier(s)
.Parameter Timeout
Length of time to wait for a result, in seconds
.Role
real-time-response:write
.Example
PS>Invoke-FalconResponderCommand -Command runscript -Arguments "-CloudFile='HelloWorld'" -SessionId
    $Session.session_id

Issues the command 'runscript' using the script titled 'HelloWorld' (previously saved to Real-time Response
Scripts and Files) to the session started and saved as the variable '$Session'. Sessions can be started using
'Start-FalconSession'.
#>
    [CmdletBinding(DefaultParameterSetName = '/real-time-response/entities/active-responder-command/v1:post')]
    param(
        [Parameter(ParameterSetName = '/real-time-response/entities/active-responder-command/v1:post',
            Mandatory = $true, Position = 1)]
        [ValidatePattern('^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$')]
        [string] $SessionId,

        [Parameter(ParameterSetName = '/real-time-response/combined/batch-active-responder-command/v1:post',
            Mandatory = $true, Position = 1)]
        [ValidatePattern('^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$')]
        [string] $BatchId,

        [Parameter(ParameterSetName = '/real-time-response/entities/active-responder-command/v1:post',
            Mandatory = $true, Position = 2)]
        [Parameter(ParameterSetName = '/real-time-response/combined/batch-active-responder-command/v1:post',
            Mandatory = $true, Position = 2)]
        [ValidateSet('cat', 'cd', 'clear', 'cp', 'csrutil', 'encrypt', 'env', 'eventlog', 'filehash', 'getsid',
            'help', 'history', 'ifconfig', 'ipconfig', 'kill', 'ls', 'map', 'memdump', 'mkdir', 'mount', 'mv',
            'netstat', 'ps', 'reg delete', 'reg load', 'reg query', 'reg set', 'reg unload', 'restart', 'rm',
            'runscript', 'shutdown', 'umount', 'unmap', 'update history', 'update install', 'update list',
            'update install', 'users', 'xmemdump', 'zip')]
        [string] $Command,

        [Parameter(ParameterSetName = '/real-time-response/entities/active-responder-command/v1:post',
            Position = 3)]
        [Parameter(ParameterSetName = '/real-time-response/combined/batch-active-responder-command/v1:post',
            Position = 3)]
        [string] $Arguments,

        [Parameter(ParameterSetName = '/real-time-response/combined/batch-active-responder-command/v1:post',
            Position = 4)]
        [ValidatePattern('^\w{32}$')]
        [array] $OptionalHostIds,

        [Parameter(ParameterSetName = '/real-time-response/combined/batch-active-responder-command/v1:post',
            Position = 5)]
        [ValidateRange(30,600)]
        [int] $Timeout
    )
    begin {
        $CommandString = if ($PSBoundParameters.Arguments) {
            @($PSBoundParameters.Command, $PSBoundParameters.Arguments) -join ' '
            [void] $PSBoundParameters.Remove('Arguments')
        } else {
            $PSBoundParameters.Command
        }
        $PSBoundParameters.Add('command_string', $CommandString)
        $Fields = @{
            BatchId         = 'batch_id'
            Command         = 'base_command'
            OptionalHostIds = 'optional_hosts'
            SessionId       = 'session_id'
        }
        $Param = @{
            Command  = $MyInvocation.MyCommand.Name
            Endpoint = $PSCmdlet.ParameterSetName
            Inputs   = Update-FieldName -Fields $Fields -Inputs $PSBoundParameters
            Format   = @{
                Query = @('timeout')
                Body  = @{
                    root = @('session_id', 'base_command', 'command_string', 'optional_hosts', 'batch_id')
                }
            }
        }
    }
    process {
        Invoke-Falcon @Param
    }
}
function Receive-FalconGetFile {
<#
.Synopsis
Download a password protected .7z archive containing a Real-time Response 'get' file [password: 'infected']
.Description
'Sha256' and 'SessionId' values can be found using 'Confirm-FalconGetFile'. 'Invoke-FalconAdminCommand' can be
used to issue a 'get' command to a single-host, and 'Invoke-FalconBatchGet' can be used for multiple hosts within
existing Real-time Response session.
.Parameter Sha256
Sha256 hash value
.Parameter SessionId
Real-time Response session identifier
.Parameter Path
Destination path
.Role
real-time-response:write
.Example
PS>Receive-FalconGetFile -Sha256 $Get.sha256 -SessionId $Get.session_id -Path file.7z

Download the file detailed by 'Confirm-FalconGetFile' (previously issued as a 'get' using
'Invoke-FalconAdminCommand') saved in the variable '$Get'.
.Example
PS>$Session = Start-FalconSession -HostIds <id>, <id>
PS>$Get = Invoke-FalconBatchGet -BatchId $Session.batch_id -FilePath C:\temp\file.exe
PS>$Confirm = Confirm-FalconGetFile -BatchGetCmdReqId $Get.batch_get_cmd_reqid
PS>$Confirm | Where-Object { $_.sha256 -and $_.created_at -and $_.session_id } | ForEach-Object {
    Receive-FalconGetFile -Sha256 $_.sha256 -SessionId $_.session_id -Path "$($_.aid)_$($_.sha256)".7z }

Start a session with hosts <id> and <id>, then use Real-time Response to 'get' the file 'C:\temp\file.exe' from
each host. Once the extraction of the file has completed, the '$Confirm' variable contains the 'sha256',
'created_at' and 'session_id' properties for each unique 'file.exe'--retrieved using 'Confirm-FalconGetFile'--
and 'Receive-FalconGetFile' can download each file and save them as '<host_id>_<sha256>.7z' in your local
directory.
#>
    [CmdletBinding(DefaultParameterSetName = '/real-time-response/entities/extracted-file-contents/v1:get')]
    param(
        [Parameter(ParameterSetName = '/real-time-response/entities/extracted-file-contents/v1:get',
            Mandatory = $true, Position = 1)]
        [ValidatePattern('^\w{64}$')]
        [string] $Sha256,

        [Parameter(ParameterSetName = '/real-time-response/entities/extracted-file-contents/v1:get',
            Mandatory = $true, Position = 2)]
        [ValidatePattern('^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$')]
        [string] $SessionId,

        [Parameter(ParameterSetName = '/real-time-response/entities/extracted-file-contents/v1:get',
            Mandatory = $true, Position = 3)]
        [ValidatePattern('^*\.7z$')]
        [ValidateScript({
            if (Test-Path $_) {
                throw "An item with the specified name $_ already exists."
            } else {
                $true
            }
        })]
        [string] $Path
    )
    begin {
        $Fields = @{
            SessionId = 'session_id'
        }
        $Param = @{
            Command  = $MyInvocation.MyCommand.Name
            Endpoint = $PSCmdlet.ParameterSetName
            Inputs   = Update-FieldName -Fields $Fields -Inputs $PSBoundParameters
            Headers  = @{
                Accept = 'application/x-7z-compressed'
            }
            Format   = @{
                Query   = @('session_id', 'sha256')
                Outfile = 'path'
            }
        }
    }
    process {
        Invoke-Falcon @Param
    }
}
function Remove-FalconCommand {
<#
.Synopsis
Remove a Real-time Response command from a queued session
.Parameter SessionId
Real-time Response session identifier
.Parameter CloudRequestId
Cloud request identifier
.Role
real-time-response:read
.Example
PS>Remove-FalconCommand -SessionId $Session.session_id -CloudRequestId <id>

Removes the pending Real-time Response command <id> from an existing session previously created and saved to
the variable '$Session' using 'Start-FalconSession' with '-QueueOffline $true'.
#>
    [CmdletBinding(DefaultParameterSetName = '/real-time-response/entities/queued-sessions/command/v1:delete')]
    param(
        [Parameter(ParameterSetName = '/real-time-response/entities/queued-sessions/command/v1:delete',
            Mandatory = $true, Position = 1)]
        [ValidatePattern('^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$')]
        [string] $SessionId,

        [Parameter(ParameterSetName = '/real-time-response/entities/queued-sessions/command/v1:delete',
            Mandatory = $true, Position = 2)]
        [ValidatePattern('^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$')]
        [string] $CloudRequestId
    )
    begin {
        $Fields = @{
            CloudRequestId = 'cloud_request_id'
            SessionId      = 'session_id'
        }
        $Param = @{
            Command  = $MyInvocation.MyCommand.Name
            Endpoint = $PSCmdlet.ParameterSetName
            Inputs   = Update-FieldName -Fields $Fields -Inputs $PSBoundParameters
            Format   = @{
                Query = @('session_id', 'cloud_request_id')
            }
        }
    }
    process {
        Invoke-Falcon @Param
    }
}
function Remove-FalconGetFile {
<#
.Synopsis
Remove Real-time Response 'get' files
.Description
Delete files previously retrieved during a Real-time Response session. The required 'Id' and 'SessionId' values
are contained in the results of 'Start-FalconSession' and 'Invoke-FalconAdminCommand' or 'Invoke-FalconBatchGet'
commands.
.Parameter SessionId
Real-time Response session identifier
.Parameter Id
Real-time Response 'get' file identifier
.Role
real-time-response:write
.Example
PS>Remove-FalconGetFile -SessionId $Session.session_id -Id <id>

Delete the 'get' file <id> from the Real-time Response session previously created and saved as the variable
'$Session'.
#>
    [CmdletBinding(DefaultParameterSetName = '/real-time-response/entities/file/v1:delete')]
    param(
        [Parameter(ParameterSetName = '/real-time-response/entities/file/v1:delete',
            Mandatory = $true, Position = 1)]
        [ValidatePattern('^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$')]
        [string] $SessionId,

        [Parameter(ParameterSetName = '/real-time-response/entities/file/v1:delete',
            Mandatory = $true, Position = 2)]
        [ValidatePattern('^\w{64}$')]
        [string] $Id
    )
    begin {
        $Fields = @{
            Id        = 'ids'
            SessionId = 'session_id'
        }
        $Param = @{
            Command  = $MyInvocation.MyCommand.Name
            Endpoint = $PSCmdlet.ParameterSetName
            Inputs   = Update-FieldName -Fields $Fields -Inputs $PSBoundParameters
            Format   = @{
                Query = @('session_id', 'ids')
            }
        }
    }
    process {
        Invoke-Falcon @Param
    }
}
function Remove-FalconSession {
<#
.Synopsis
Delete a Real-time Response session
.Parameter Id
Real-time Response session identifier
.Role
real-time-response:read
.Example
PS>Remove-FalconSession -Id <id>

Delete the Real-time Response session <id>.
#>
    [CmdletBinding(DefaultParameterSetName = '/real-time-response/entities/sessions/v1:delete')]
    param(
        [Parameter(ParameterSetName = '/real-time-response/entities/sessions/v1:delete', Mandatory = $true,
            Position = 1)]
        [ValidatePattern('^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$')]
        [string] $Id
    )
    begin {
        $Fields = @{
            Id = 'session_id'
        }
        $Param = @{
            Command  = $MyInvocation.MyCommand.Name
            Endpoint = $PSCmdlet.ParameterSetName
            Inputs   = Update-FieldName -Fields $Fields -Inputs $PSBoundParameters
            Format   = @{
                Query = @('session_id')
            }
        }
    }
    process {
        Invoke-Falcon @Param
    }
}
function Start-FalconSession {
<#
.Synopsis
Initialize a single-host or batch Real-time Response session
.Description
Real-time Response sessions require Host identifier values, which can be found using 'Get-FalconHost'. Sessions
that are successfully started return a 'session_id' (for single hosts) or 'batch_id' (multiple hosts) value which
can be used to issue commands that will be processed by the hosts in the session. Commands can be issued using
'Invoke-FalconCommand', 'Invoke-FalconResponderCommand', 'Invoke-FalconAdminCommand' and 'Invoke-FalconBatchGet'.
.Parameter HostId
Host identifier
.Parameter HostIds
Host identifiers
.Parameter Timeout
Length of time to wait for a result, in seconds
.Parameter ExistingBatchId
Add hosts to an existing batch Real-time Response session
.Parameter QueueOffline
Add non-responsive hosts to the offline queue
.Role
real-time-response:read
.Example
PS>$Session = Start-FalconSession -HostId <id>

Start a Real-time Response session for host <id>. Commands can be issued to the active session using the value
contained in '$Session.session_id'.
#>
    [CmdletBinding(DefaultParameterSetName = '/real-time-response/entities/sessions/v1:post')]
    param(
        [Parameter(ParameterSetName = '/real-time-response/entities/sessions/v1:post', Mandatory = $true,
            Position = 1)]
        [ValidatePattern('^\w{32}$')]
        [string] $HostId,

        [Parameter(ParameterSetName = '/real-time-response/combined/batch-init-session/v1:post', Mandatory = $true,
            Position = 1)]
        [ValidatePattern('^\w{32}$')]
        [array] $HostIds,

        [Parameter(ParameterSetName = '/real-time-response/combined/batch-init-session/v1:post', Position = 2)]
        [ValidateRange(30,600)]
        [int] $Timeout,

        [Parameter(ParameterSetName = '/real-time-response/combined/batch-init-session/v1:post', Position = 3)]
        [ValidatePattern('^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$')]
        [string] $ExistingBatchId,

        [Parameter(ParameterSetName = '/real-time-response/entities/sessions/v1:post', Position = 2)]
        [Parameter(ParameterSetName = '/real-time-response/combined/batch-init-session/v1:post', Position = 4)]
        [boolean] $QueueOffline
    )
    begin {
        $Fields = @{
            ExistingBatchId = 'existing_batch_id'
            HostId          = 'device_id'
            HostIds         = 'host_ids'
            QueueOffline    = 'queue_offline'
        }
        $Param = @{
            Command  = $MyInvocation.MyCommand.Name
            Endpoint = $PSCmdlet.ParameterSetName
            Inputs   = Update-FieldName -Fields $Fields -Inputs $PSBoundParameters
            Format   = @{
                Query = @('timeout')
                Body  = @{
                    root = @('existing_batch_id', 'host_ids', 'queue_offline', 'device_id')
                }
            }
        }
    }
    process {
        $Request = Invoke-Falcon @Param
        if ($Request.batch_id -and $Request.resources) {
            [PSCustomObject] @{
                batch_id = $Request.batch_id
                hosts    = $Request.resources.PSObject.Properties.Value
            }
        } else {
            $Request
        }
    }
}
function Update-FalconSession {
<#
.Synopsis
Refresh a single-host or batch Real-time Response session to prevent expiration
.Description
Real-time Response sessions expire after 10 minutes by default. Any commands that were issued to a session that
take longer than 10 minutes will not return results without refreshing the session to keep it alive until the
command process completes.
.Parameter HostId
Host identifier
.Parameter BatchId
Real-time Response batch session identifier
.Parameter Timeout
Length of time to wait for a result, in seconds
.Parameter HostsToRemove
Host identifier(s) to remove from the batch Real-time Response session
.Parameter QueueOffline
Add non-responsive hosts to the offline queue
.Role
real-time-response:read
.Example
PS>Update-FalconSession -SessionId $Session.session_id

Refresh the active session that was previously started and stored in the '$Session' variable using
'Start-FalconSession'.
#>
    [CmdletBinding(DefaultParameterSetName = '/real-time-response/entities/refresh-session/v1:post')]
    param(
        [Parameter(ParameterSetName = '/real-time-response/entities/refresh-session/v1:post', Mandatory = $true,
            Position = 1)]
        [ValidatePattern('^\w{32}$')]
        [string] $HostId,

        [Parameter(ParameterSetName = '/real-time-response/combined/batch-refresh-session/v1:post',
            Mandatory = $true, Position = 1)]
        [ValidatePattern('^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$')]
        [string] $BatchId,

        [Parameter(ParameterSetName = '/real-time-response/combined/batch-refresh-session/v1:post', Position = 2)]
        [ValidateRange(30,600)]
        [int] $Timeout,

        [Parameter(ParameterSetName = '/real-time-response/combined/batch-refresh-session/v1:post', Position = 3)]
        [ValidatePattern('^\w{32}$')]
        [array] $HostsToRemove,

        [Parameter(ParameterSetName = '/real-time-response/entities/refresh-session/v1:post', Position = 2)]
        [Parameter(ParameterSetName = '/real-time-response/combined/batch-refresh-session/v1:post', Position = 4)]
        [boolean] $QueueOffline
    )
    begin {
        $Fields = @{
            BatchId       = 'batch_id'
            HostId        = 'device_id'
            HostsToRemove = 'hosts_to_remove'
            QueueOffline  = 'queue_offline'
        }
        $Param = @{
            Command  = $MyInvocation.MyCommand.Name
            Endpoint = $PSCmdlet.ParameterSetName
            Inputs   = Update-FieldName -Fields $Fields -Inputs $PSBoundParameters
            Format   = @{
                Query = @('timeout')
                Body  = @{
                    root = @('queue_offline', 'device_id', 'batch_id', 'hosts_to_remove')
                }
            }
        }
    }
    process {
        Invoke-Falcon @Param
    }
}